
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import javax.swing.*;
import javax.swing.border.AbstractBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;
// 필요한 패키지 및 클래스를 임포트

public class LoginForm extends JFrame {
    private final JTextField usernameField;  // 아이디 입력 필드
    private final JPasswordField passwordField;  // 비밀번호 입력 필드
    private final JButton clearButton;  // "X" 버튼(아이디)
    private final JButton passwordClearButton; //"X" 버튼(비번)

    public LoginForm() {
        // 프레임 설정
        setTitle("쿠커리켓");
        setSize(780, 825);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  // 윈도우 닫기 동작 설정
        setLocationRelativeTo(null);  // 화면 중앙에 위치

        // 전체 패널을 생성하여 레이아웃을 설정
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());

        // GridBagConstraints 설정
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridwidth = GridBagConstraints.REMAINDER;  // 현재 컴포넌트가 한 행의 마지막 컴포넌트임을 나타냄
        gbc.fill = GridBagConstraints.BOTH;  // 컴포넌트 크기를 부모 컨테이너에 맞게 설정

        // 타이틀 레이블 추가
        JLabel label = new JLabel("쿠커리켓");
        label.setFont(new Font("Serif", Font.BOLD, 36));  // 폰트 설정
        label.setHorizontalAlignment(SwingConstants.CENTER);  // 텍스트 가운데 정렬
        mainPanel.add(label, gbc);

        // 간격 추가(쿠커리켓 텍스트와 input 패널 사이)
        gbc.gridx = 0;
        gbc.gridy = 1;
        mainPanel.add(Box.createVerticalStrut(50), gbc);

        // 입력 패널 생성
        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new GridBagLayout());
        GridBagConstraints constraints = new GridBagConstraints();

        //아이디 필드+버튼 패널 생성
        JPanel IDPanel = new JPanel();

        // 아이디 입력 필드 생성
        usernameField = new JTextField(32);  // 길이가 36인 텍스트 필드
        usernameField.setFont(new Font("Serif", Font.PLAIN, 15));  // 폰트 설정
        PlainDocument usernameDocument = new PlainDocument() {
            @Override
            public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {
                // 아이디 입력 필드에 최대 글자 수를 10자로 제한
                if (getLength() + str.length() <= 10) {
                    super.insertString(offs, str, a);
                }
            }
        };
        usernameField.setDocument(usernameDocument);  // 아이디 입력 필드에 글자 수 제한 적용
        Dimension usernameFieldDimension = new Dimension(500, 50);
        usernameField.setPreferredSize(usernameFieldDimension);
        usernameField.setText("");  // 초기 텍스트 설정?????
        usernameField.setForeground(new Color(0, 0, 0, 128));  // 텍스트 색상 설정
        usernameField.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                if (usernameField.getText().equals("아이디")) {
                    usernameField.setText("");
                    usernameField.setForeground(Color.BLACK);
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (usernameField.getText().isEmpty()) {
                    usernameField.setText("");//??????
                    usernameField.setForeground(new Color(0, 0, 0, 128));
                }
            }
        });

        // "X" 버튼을 아이디 입력 필드와 연결
        clearButton = new JButton("X");
        clearButton.setFont(new Font("Serif", Font.PLAIN, 12));
        clearButton.setFocusPainted(false); // 버튼 포커스 시 강조 표시를 제거
        clearButton.setVisible(false); // 초기에는 버튼을 숨김

        // 아이디 필드 내용 변경을 감지하는 DocumentListener 추가
        usernameField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updateClearButtonVisibility();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updateClearButtonVisibility();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                // Plain text components may not fire these events
            }
        });

        // 포커스 이벤트를 처리하는 FocusListener 추가
        usernameField.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                if (usernameField.getText().equals("아이디")) {
                    usernameField.setText("");
                    clearButton.setVisible(false); // 포커스를 얻으면 버튼 숨기기
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (usernameField.getText().isEmpty() && !passwordField.isFocusOwner()) {
                    usernameField.setText("아이디");
                    clearButton.setVisible(false); // 포커스를 잃으면 버튼 숨기기
                } else {
                    clearButton.setVisible(true); // 아이디가 비어 있지 않으면 버튼 표시
                }
            }
        });

        // "X" 버튼을 클릭하면 아이디 입력 필드의 내용을 지우기
        clearButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                usernameField.setText(""); // 아이디 입력 필드 내용을 지우기
                clearButton.setVisible(false); // 버튼 숨기기
            }
        });

        IDPanel.add(usernameField);
        IDPanel.add(clearButton);

//비번 필드+버튼 패널 생성
        JPanel PWPanel = new JPanel();


        // 비밀번호 입력 필드 생성
        passwordField = new JPasswordField(32);  // 비밀번호 입력 필드, 길이가 36
        passwordField.setFont(new Font("Serif", Font.PLAIN, 15));  // 폰트 설정
        PlainDocument passwordDocument = new PlainDocument() {
            @Override
            public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {
                // 비밀번호 입력 필드에 최대 글자 수를 10자로 제한
                if (getLength() + str.length() <= 10) {
                    super.insertString(offs, str, a);
                }
            }
        };
        passwordField.setDocument(passwordDocument);  // 비밀번호 입력 필드에 글자 수 제한 적용
        Dimension passwordFieldDimension = new Dimension(360, 50);
        passwordField.setPreferredSize(passwordFieldDimension);
        passwordField.setText("");  // 초기 텍스트 설정
        passwordField.setForeground(new Color(0, 0, 0, 128));  // 텍스트 색상 설정
        passwordField.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                if (new String(passwordField.getPassword()).equals("비밀번호")) {
                    passwordField.setText("");
                    passwordField.setForeground(Color.BLACK);
                    passwordField.setEchoChar('•'); // 비밀번호 필드의 문자를 가리기 위해 설정
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (new String(passwordField.getPassword()).isEmpty()) {
                    passwordField.setText("");
                    passwordField.setEchoChar((char) 0); // 가리는 문자 제거
                    passwordField.setForeground(new Color(0, 0, 0, 128));
                }
            }
        });

        // "X" 버튼을 비밀번호 입력 필드와 연결
        passwordClearButton = new JButton("X");
        passwordClearButton.setFont(new Font("Serif", Font.PLAIN, 12));
        passwordClearButton.setFocusPainted(false); // 버튼 포커스 시 강조 표시를 제거
        passwordClearButton.setVisible(false); // 초기에는 버튼을 숨김

        // 비밀번호 필드 내용 변경을 감지하는 DocumentListener 추가
        passwordField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                updatePasswordClearButtonVisibility();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                updatePasswordClearButtonVisibility();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                // Plain text components may not fire these events
            }
        });

        // 포커스 이벤트를 처리하는 FocusListener 추가
        passwordField.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                if (new String(passwordField.getPassword()).equals("비밀번호")) {
                    passwordField.setText("");
                    passwordClearButton.setVisible(false);
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (new String(passwordField.getPassword()).isEmpty() && !passwordField.isFocusOwner()) {
                    passwordField.setText("비밀번호");
                    passwordClearButton.setVisible(false);
                } else {
                    passwordClearButton.setVisible(true);
                }
            }
        });

        // "X" 버튼을 클릭하면 비밀번호 입력 필드의 내용을 지우기
        passwordClearButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                passwordField.setText(""); // 비밀번호 입력 필드 내용을 지우기
                passwordClearButton.setVisible(false); // 버튼 숨기기
            }
        });

        PWPanel.add(passwordField);
        PWPanel.add(passwordClearButton);

        //아이디 위치 지정
        constraints.gridx = 0;
        constraints.gridy = 0;
        inputPanel.add(IDPanel, constraints);

        //비번 위치 지정
        constraints.gridx = 0;
        constraints.gridy = 1;
        inputPanel.add(PWPanel, constraints);

        //입력 위치 지정
        gbc.gridx = 0;
        gbc.gridy = 2;
        mainPanel.add(inputPanel, gbc);

        // 간격 추가(inputPanel과 로그인)
        gbc.insets = new Insets(50, 5, 0, 5);

        // buttonPanel 생성 및 로그인 버튼 추가
        JPanel buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridBagLayout());
        constraints = new GridBagConstraints();

        JButton loginButton = new JButton("로그인");
        // 로그인 버튼의 모서리 둥글게 만들기
        loginButton.setBorder(new RoundedBorder(10));

        //로그인 텍스트 크기 키우기
        loginButton.setFont(new Font("Serif", Font.BOLD, 24));

        // 버튼 크기 설정
        Dimension loginButtonDimension = new Dimension(400, 50);
        loginButton.setPreferredSize(loginButtonDimension);
        constraints.gridx = 0;
        constraints.gridy = 0;
        buttonPanel.add(loginButton, constraints);

        gbc.gridx = 0;
        gbc.gridy = 3;
        mainPanel.add(buttonPanel, gbc);

        // 간격 추가(로그인과 밑에 3버튼)
        gbc.insets = new Insets(10, 5, 0, 5);

        // 로그인 버튼에 액션 리스너 추가
        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String username = usernameField.getText();
                char[] password = passwordField.getPassword();

                // 실제로는 안전한 방식으로 비밀번호를 처리해야 함
                // 아래의 조건문은 테스트 용도로 작성된 것이며 실제 환경에서는 사용하지 말아야 함
                if (username.equals("아이디") && new String(password).equals("비밀번호")) {
                    JOptionPane.showMessageDialog(LoginForm.this, "로그인 성공!");
                } else {
                    JOptionPane.showMessageDialog(LoginForm.this, "로그인 실패. 다시 시도하세요.");
                }
            }
        });

        //sub 패널을 생성하기
        JPanel subPanel = new JPanel();
        subPanel.setLayout(new GridBagLayout());

        //sub패널에 들어갈 내용들
        JButton passwordRecoveryButton = new JButton("비밀번호 찾기");
        JButton usernameRecoveryButton = new JButton("아이디 찾기");
        JButton signupButton = new JButton("회원가입");

        // 프레임의 배경색을 버튼의 배경색으로 설정
        Color buttonBackgroundColor = new Color(240, 240, 240); // 예시 색상: 밝은 회색
        passwordRecoveryButton.setBackground(buttonBackgroundColor);
        usernameRecoveryButton.setBackground(buttonBackgroundColor);
        signupButton.setBackground(buttonBackgroundColor);

        // 버튼 스타일 설정: 테두리 없애기
        passwordRecoveryButton.setBorderPainted(false);
        usernameRecoveryButton.setBorderPainted(false);
        signupButton.setBorderPainted(false);

        // "|" 문자를 추가할 라벨 생성
        JLabel separator1 = new JLabel("|");
        JLabel separator2 = new JLabel("|");

        // 버튼 및 라벨을 subPanel에 추가
        subPanel.add(passwordRecoveryButton);
        subPanel.add(separator1);
        subPanel.add(usernameRecoveryButton);
        subPanel.add(separator2);
        subPanel.add(signupButton);

        passwordRecoveryButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                // 비밀번호 찾기 버튼을 클릭했을 때 실행할 동작을 여기에 추가
                JOptionPane.showMessageDialog(LoginForm.this, "비밀번호를 찾습니다.");
            }
        });

        usernameRecoveryButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                // 아이디 찾기 버튼을 클릭했을 때 실행할 동작을 여기에 추가
                JOptionPane.showMessageDialog(LoginForm.this, "아이디를 찾습니다.");
            }
        });

        signupButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                // 회원가입 버튼을 클릭했을 때 실행할 동작을 여기에 추가
                JOptionPane.showMessageDialog(LoginForm.this, "회원가입을 진행합니다.");
            }
        });


        //sub패널 위치 지정
        gbc.gridx = 0;
        gbc.gridy = 4;
        mainPanel.add(subPanel, gbc);

        // 패널을 프레임에 추가
        add(mainPanel);
    }

    // "X" 버튼의 표시 여부를 업데이트하는 메서드(아이디)
    private void updateClearButtonVisibility() {
        if (usernameField.getText().isEmpty() || usernameField.getText().equals("아이디")) {
            clearButton.setVisible(false);
        } else {
            clearButton.setVisible(true);
        }
    }

    // "X" 버튼의 표시 여부를 업데이트하는 메서드(비번)

    private void updatePasswordClearButtonVisibility() {
        if (passwordField.getText().isEmpty() || passwordField.getText().equals("비밀번호")) {
            passwordClearButton.setVisible(false);
        } else {
            passwordClearButton.setVisible(true);
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            LoginForm loginForm = new LoginForm();
            loginForm.setVisible(true); // 프레임을 표시

        });
    }

    // 사용자 정의 보더 클래스(테두리 둥글게 만드는 용)
    static class RoundedBorder extends AbstractBorder {
        private int radius;

        public RoundedBorder(int radius) {
            this.radius = radius;
        }

        @Override
        public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {
            g.drawRoundRect(x, y, width - 1, height - 1, radius, radius);
        }
    }
}








